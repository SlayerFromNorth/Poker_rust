use cute::c;
extern crate cute;

fn main() {
    let card_deck = [   [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [20, 9], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14],
                    [30, 2], [30, 3], [30, 4], [30, 5], [30, 6], [30, 7], [30, 8], [30, 9], [30, 10], [30, 11], [30, 12], [30, 13], [30, 14],
                    [40, 2], [40, 3], [40, 4], [40, 5], [40, 6], [40, 7], [40, 8], [40, 9], [40, 10], [40, 11], [40, 12], [40, 13], [40, 14],
                    [50, 2], [50, 3], [50, 4], [50, 5], [50, 6], [50, 7], [50, 8], [50, 9], [50, 10], [50, 11], [50, 12], [50, 13], [50, 14]];
    
    
    let colors = [20, 30, 40, 50];
    

    pub fn find_gant(cards: Vec<i32>) -> i32{
        /* straight flush | four of a kind | house | flush | straight | three alike | two pair | pair | high card*/
        todo!()
    }
    let cards = [23, 32, 12, 33, 45];
    #[macro_use(c)]
    let color = c![card_deck[x][0], for x in cards];
    let mut number_value = c![card_deck[x][1], for x in cards];

    number_value.sort_by(|a, b| b.cmp(a));
    
    let mut high = String::new();
    high = format!("{:02}{:02}{:02}{:02}{:02}", number_value[0], number_value[1], number_value[2], number_value[3], number_value[4]);
    let high_int = high.parse::<i32>().unwrap();
    let points = [1, high_int];

    println!("{:?}", &color);

    for ss in colors{
        let gg = c![1, for a in &color, if a == &ss];
        let sum: i32 = gg.iter().sum();
        if sum > 4{
            let right = c![cards[index], for (index, a) in gg.iter().enumerate(), if a == 1];
            println!("{:?}", gg);
        }
        
    }
    
}
